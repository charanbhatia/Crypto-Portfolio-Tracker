// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  portfolio Portfolio?
  trades   Trade[]
  priceAlerts PriceAlert[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String   @unique
  usdBalance Float   @default(10000.0) // Starting with $10,000
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings Holding[]
}

model Holding {
  id          String   @id @default(cuid())
  portfolioId String
  symbol      String   // BTC, ETH, USDT, USDC, XMR, SOL
  amount      Float    @default(0.0)
  avgBuyPrice Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol])
}

model Trade {
  id         String   @id @default(cuid())
  userId     String
  symbol     String   // BTC, ETH, USDT, USDC, XMR, SOL
  type       String   // BUY or SELL
  amount     Float
  price      Float
  total      Float
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PriceAlert {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  targetPrice Float
  condition String   // ABOVE or BELOW
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  triggeredAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}